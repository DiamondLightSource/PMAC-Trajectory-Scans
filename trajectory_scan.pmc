; *****************************************************************************************
; Variables
; *****************************************************************************************

#Define RootVar 4000

; EPICS Required Variables - P4000 address = $6FA0
#Define CurrentBufferAdr  P(RootVar + 1)   		; A or B buffer address
#Define BufferLength   		P(RootVar + 2)   		; Length of a single buffer e.g. AX, BX, ..., User
#Define BufferFill     		P(RootVar + 3)   		; The index that current buffers have been filled up to
#Define CurrentIndex   		P(RootVar + 4)   		; Current index position in buffers
#Define Status          	P(RootVar + 5)   		; Status of motion program for EPICS
#Define TotalPoints    		P(RootVar + 6)   		; Total number of points scanned through
#Define Cancel          	P(RootVar + 7)   		; Cancel trigger for EPICS
#Define Axes            	P(RootVar + 8)   		; An int between 1 and 256 specifying which axes to use
#Define BufferAdr_A 			P(RootVar + 9)   		; Start index of first sub-buffer of buffer A (AX)
#Define BufferAdr_B 			P(RootVar + 10)  		; Start index of first sub-buffer of buffer B (BX)

; Motion Program Variables
#Define X_Axis          	P(RootVar + 101)  	; Specifiers for what axes are to be used
#Define Y_Axis          	P(RootVar + 102)
#Define Z_Axis          	P(RootVar + 103)
#Define U_Axis          	P(RootVar + 104)
#Define V_Axis          	P(RootVar + 105)
#Define W_Axis          	P(RootVar + 106)
#Define A_Axis          	P(RootVar + 107)
#Define B_Axis          	P(RootVar + 108)
#Define C_Axis          	P(RootVar + 109)

#Define Time							P(RootVar + 110)		; Current coordinate values
#Define X_Coord						P(RootVar + 111)
#Define Y_Coord						P(RootVar + 112)
#Define Z_Coord						P(RootVar + 113)
#Define U_Coord						P(RootVar + 114)
#Define V_Coord						P(RootVar + 115)
#Define W_Coord						P(RootVar + 116)
#Define A_Coord						P(RootVar + 117)
#Define B_Coord						P(RootVar + 118)
#Define C_Coord						P(RootVar + 119)
#Define User							P(RootVar + 120)

#Define Prev_X 						P(RootVar + 121)		; Previous coordinate values
#Define Prev_Y 						P(RootVar + 122)
#Define Prev_Z 						P(RootVar + 123)
#Define Prev_U 						P(RootVar + 124)
#Define Prev_V 						P(RootVar + 125)
#Define Prev_W 						P(RootVar + 126)
#Define Prev_A 						P(RootVar + 127)
#Define Prev_B 						P(RootVar + 128)
#Define Prev_C 						P(RootVar + 129)

#Define Next_Time        	P(RootVar + 130)  	; Next coordinate values
#Define Next_X	         	P(RootVar + 131)
#Define Next_Y         		P(RootVar + 132)
#Define Next_Z        		P(RootVar + 133)
#Define Next_U         		P(RootVar + 134)
#Define Next_V        		P(RootVar + 135)
#Define Next_W        		P(RootVar + 136)
#Define Next_A        		P(RootVar + 137)
#Define Next_B        		P(RootVar + 138)
#Define Next_C        		P(RootVar + 139)
#Define Next_User     		P(RootVar + 140)

#Define X_Vel							P(RootVar + 141)		; Move velocities
#Define Y_Vel							P(RootVar + 142)
#Define Z_Vel							P(RootVar + 143)
#Define U_Vel							P(RootVar + 144)
#Define V_Vel							P(RootVar + 145)
#Define W_Vel							P(RootVar + 146)
#Define A_Vel							P(RootVar + 147)
#Define B_Vel							P(RootVar + 148)
#Define C_Vel							P(RootVar + 149)

#Define Time_Adr        	M4000  							; Pointers to Next_* coordinate addresses
#Define X_Adr         		M4001
#Define Y_Adr         		M4002
#Define Z_Adr        			M4003
#Define U_Adr         		M4004
#Define V_Adr      				M4005
#Define W_Adr        			M4006
#Define A_Adr        			M4007
#Define B_Adr        			M4008
#Define C_Adr        			M4009
#Define User_Adr        	M4010

Time_Adr->X:$7022,0,24											; Assignments for pointers to P address locations
X_Adr->X:$7023,0,24													; P0 = $6000 -> P4130 = $7022
Y_Adr->X:$7024,0,24
Z_Adr->X:$7025,0,24
U_Adr->X:$7026,0,24
V_Adr->X:$7027,0,24
W_Adr->X:$7028,0,24
A_Adr->X:$7029,0,24
B_Adr->X:$702A,0,24
C_Adr->X:$702B,0,24
User_Adr->X:$702C,0,24

; *****************************************************************************************
; Set-Up
; *****************************************************************************************

Del Gat
; Coordinate System 1
&1

#1->X
#2->Y
#3->Z
#4->U
#5->V
#6->W
#7->A
#8->B
;#9->C

; Set Initial Values
BufferLength = 1000
BufferAdr_A = $30000
BufferAdr_B = BufferAdr_A + 11*BufferLength

; Make sure all buffers are closed
Close

; *****************************************************************************************
; Program
; *****************************************************************************************

Open Prog 1
Clear

; Check which axes are required
GoSub1

Abs
FRAX(X,Y,Z,U,V,W,A,B,C)

CurrentBufferAdr = BufferAdr_A
CurrentIndex = 0
Status = 0
TotalPoints = 0
Cancel = 0
BufferFill = BufferLength

Prev_X = 0 X_Coord = 0
Prev_Y = 0 Y_Coord = 0
Prev_Z = 0 Z_Coord = 0
Prev_U = 0 U_Coord = 0
Prev_V = 0 V_Coord = 0
Prev_W = 0 W_Coord = 0
Prev_A = 0 A_Coord = 0
Prev_B = 0 B_Coord = 0
Prev_C = 0 C_Coord = 0

P4201 = 0
P4202 = 0
P4203 = 0
Dwell 1000

; <<< Allow EPICS to assign any values here, so they won't be reset - Or just don't set variables that EPICS will set?

While(Cancel != 1 and BufferFill > 0) ; Run indefinitely, but allow EPICS to stop program

		P4201 = P4201 + 1
    ; <<< EPICS to set BUFFER_FILL here

    CurrentIndex = 0
    While(CurrentIndex < BufferFill)

				P4202 = P4202 + 1
				
		    GoSub2	; Shift values through Next_* -> *_Coord -> Prev_*
    		
		    ; Increment Addresses
		    GoSub6
		    
				; Calculate velocities
		    If(1 < 2)
		    	GoSub3	; Prev -> Current
				EndIf
				If(1 = 1)
					GoSub4	; Prev -> Next
				EndIf
				If(1 < 2)
					GoSub5	; Current -> Next
				EndIf
    		
				; Move axes
				GoSub7

        ; Run any required subroutine >>> Do we need to be able to run more than one?
        If(User > 0)
            GoSub(User)
        End If

        CurrentIndex = CurrentIndex + 1
        TotalPoints = TotalPoints + 1
        
    End While

    ; >>> Might need second move call because of double endif statements - won't merge otherwise

    If(CurrentBufferAdr = BufferAdr_A)
        CurrentBufferAdr = BufferAdr_B
    Else
        CurrentBufferAdr = BufferAdr_A
    End If
    

End While

Status = 1		; >>> Use synchronous assignment?

; Buffers: AX, AY, AZ, AU, AV, AW, AA, AB, AC, ATime, AUser
;          BX, BY, BZ, BU, BV, BW, BA, BB, BC, BTime, BUser


; Subroutine 1 ************************************************************************************
; Convert <Axes> to binary values for each axis to decide which axes to use
; *************************************************************************************************

N1
		X_Axis = 0
		Y_Axis = 0
		Z_Axis = 0
		U_Axis = 0
		V_Axis = 0
		W_Axis = 0
		A_Axis = 0
		B_Axis = 0
		C_Axis = 0
		
		If(Axes > 256 or Axes = 256)
		    X_Axis = 1
		    Axes = Axes - 256
		End If
		If(Axes > 128 or Axes = 128)
		    Y_Axis = 1
		    Axes = Axes - 128
		End If
		If(Axes > 64 or Axes = 64)
		    Z_Axis = 1
		    Axes = Axes - 64
		End If
		If(Axes > 32 or Axes = 32)
		    U_Axis = 1
		    Axes = Axes - 32
		End If
		If(Axes > 16 or Axes = 16)
		    V_Axis = 1
		    Axes = Axes - 16
		End If
		If(Axes > 8 or Axes = 8)
		    W_Axis = 1
		    Axes = Axes - 8
		End If
		If(Axes > 4 or Axes = 4)
		    A_Axis = 1
		    Axes = Axes - 4
		End If
		If(Axes > 2 or Axes = 2)
		    B_Axis = 1
		    Axes = Axes - 2
		End If
		If(Axes > 1 or Axes = 1)
		    C_Axis = 1
		    Axes = Axes - 1
		End If
Return

; Subroutine 2 ************************************************************************************
; Shift coordinate buffer through Next -> Coord -> Prev
; *************************************************************************************************

N2
		Prev_X = X_Coord
		X_Coord = Next_X
		Prev_Y = Y_Coord
		Y_Coord = Next_Y
		Prev_Z = Z_Coord
		Z_Coord = Next_Z
		Prev_U = U_Coord
		U_Coord = Next_U
		Prev_V = V_Coord
		V_Coord = Next_V
		Prev_W = W_Coord
		W_Coord = Next_W
		Prev_A = A_Coord
		A_Coord = Next_A
		Prev_B = B_Coord
		B_Coord = Next_B
		Prev_C = C_Coord
		C_Coord = Next_C
		Time = Next_Time
Return

; Subroutines 3-5 *********************************************************************************
; Calculate velocities for next move - 3: Prev->Current, 4: Prev->Next, 5: Current->Next
; *************************************************************************************************

N3
		PVT (Time)
		X_Vel = (X_Coord - Prev_X)/Time
		Y_Vel = (Y_Coord - Prev_Y)/Time
		Z_Vel = (Z_Coord - Prev_Z)/Time
		U_Vel = (U_Coord - Prev_U)/Time
		V_Vel = (V_Coord - Prev_V)/Time
		W_Vel = (W_Coord - Prev_W)/Time
		A_Vel = (A_Coord - Prev_A)/Time
		B_Vel = (B_Coord - Prev_B)/Time
		C_Vel = (C_Coord - Prev_C)/Time
Return

N4
		PVT (Time + Next_Time)
		X_Vel = (Next_X - Prev_X)/(Time + Next_Time)
		Y_Vel = (Next_Y - Prev_Y)/(Time + Next_Time)
		Z_Vel = (Next_Z - Prev_Z)/(Time + Next_Time)
		U_Vel = (Next_U - Prev_U)/(Time + Next_Time)
		V_Vel = (Next_V - Prev_V)/(Time + Next_Time)
		W_Vel = (Next_W - Prev_W)/(Time + Next_Time)
		A_Vel = (Next_A - Prev_A)/(Time + Next_Time)
		B_Vel = (Next_B - Prev_B)/(Time + Next_Time)
		C_Vel = (Next_C - Prev_C)/(Time + Next_Time)
Return

N5
		PVT (Next_Time)
		X_Vel = (Next_X - X_Coord)/Next_Time
		Y_Vel = (Next_Y - Y_Coord)/Next_Time
		Z_Vel = (Next_Z - Z_Coord)/Next_Time
		U_Vel = (Next_U - U_Coord)/Next_Time
		V_Vel = (Next_V - V_Coord)/Next_Time
		W_Vel = (Next_W - W_Coord)/Next_Time
		A_Vel = (Next_A - A_Coord)/Next_Time
		B_Vel = (Next_B - B_Coord)/Next_Time
		C_Vel = (Next_C - C_Coord)/Next_Time
Return

; Subroutine 6 ************************************************************************************
; Increment coordinate pointers (CurrentIndex is incremented in main)
; *************************************************************************************************

N6
		If(X_Axis = 1) 
    		X_Adr = CurrentBufferAdr + CurrentIndex 
    End If
    If(Y_Axis = 1)
    		Y_Adr = CurrentBufferAdr + CurrentIndex + BufferLength
    End If
    If(Z_Axis = 1)
    		Z_Adr = CurrentBufferAdr + CurrentIndex + 2*BufferLength
    End If
    If(U_Axis = 1)
    		U_Adr = CurrentBufferAdr + CurrentIndex + 3*BufferLength
    End If
    If(V_Axis = 1)
    		V_Adr = CurrentBufferAdr + CurrentIndex + 4*BufferLength
    End If
    If(W_Axis = 1)
    		W_Adr = CurrentBufferAdr + CurrentIndex + 5*BufferLength
    End If
    If(A_Axis = 1)
    		A_Adr = CurrentBufferAdr + CurrentIndex + 6*BufferLength
    End If
    If(B_Axis = 1)
    		B_Adr = CurrentBufferAdr + CurrentIndex + 7*BufferLength
    End If
    If(C_Axis = 1)
    		C_Adr = CurrentBufferAdr + CurrentIndex + 8*BufferLength
    End If
    
		Time = 	CurrentBufferAdr + CurrentIndex + 9*BufferLength
		User = 	CurrentBufferAdr + CurrentIndex + 10*BufferLength
Return

; Subroutine 7 ************************************************************************************
; Move axes
; *************************************************************************************************

N7
		; Set to Q Variables before move call to shorten command
		Q1 = X_Coord
		Q2 = X_Vel
		Q3 = Y_Coord
		Q4 = Y_Vel
		Q5 = Z_Coord
		Q6 = Z_Vel
		Q7 = U_Coord
		Q8 = U_Vel
		Q9 = V_Coord
		Q10 = V_Vel
		Q11 = W_Coord
		Q12 = W_Vel
		Q13 = A_Coord
		Q14 = A_Vel
		Q15 = B_Coord
		Q16 = B_Vel
		Q17 = C_Coord
		Q18 = C_Vel

    X(Q1):(Q2) Y(Q3):(Q4) Z(Q5):(Q6) U(Q7):(Q8) V(Q9):(Q10) W(Q11):(Q12) A(Q13):(Q14) B(Q15):(Q16) C(Q17):(Q18)
		
Return

Close