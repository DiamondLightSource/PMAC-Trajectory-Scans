; *****************************************************************************************
; Variables
; *****************************************************************************************

#DEFINE RT_ADR P1

; EPICS required variables
#DEFINE CURRENT_BUFFER  P(RT_ADR + 1)   ; A or B buffer address
#DEFINE BUFFER_LENGTH   P(RT_ADR + 2)   ; Length of a single buffer e.g. AX, BX, ..., User
#DEFINE CURRENT_INDEX   P(RT_ADR + 3)   ; Current index position in buffers
#DEFINE STATUS          P(RT_ADR + 4)   ; Status of motion program for EPICS
#DEFINE TOTAL_POINTS    P(RT_ADR + 5)   ; Total number of points scanned through
#DEFINE CANCEL          P(RT_ADR + 6)   ; Cancel trigger for EPICS
#DEFINE AXES            P(RT_ADR + 20)  ; An int specifying which axes to use (X,Y,Z,U...)
                                        ; between 1 and 256

; Motion program specific variables
#DEFINE BUFFER_START_A  P(RT_ADR + 7)   ; Start index of first sub-buffer of buffer A (AX)
#DEFINE BUFFER_START_B  P(RT_ADR + 8)   ; Start index of first sub-buffer of buffer B (BX)
#DEFINE X_COORD         P(RT_ADR + 9)   ; Pointer to current buffer X index
#DEFINE Y_COORD         P(RT_ADR + 10)  ; Pointer to current buffer Y index
#DEFINE Z_COORD         P(RT_ADR + 11)  ; Pointer to current buffer Z index
#DEFINE U_COORD         P(RT_ADR + 12)  ; Pointer to current buffer U index
#DEFINE V_COORD         P(RT_ADR + 13)  ; Pointer to current buffer V index
#DEFINE W_COORD         P(RT_ADR + 14)  ; Pointer to current buffer W index
#DEFINE A_COORD         P(RT_ADR + 15)  ; Pointer to current buffer A index
#DEFINE B_COORD         P(RT_ADR + 16)  ; Pointer to current buffer B index
#DEFINE C_COORD         P(RT_ADR + 17)  ; Pointer to current buffer C index
#DEFINE TIME_VAL        P(RT_ADR + 18)  ; Pointer to current buffer Time value
#DEFINE USER_VAL        P(RT_ADR + 19)  ; Pointer to current buffer User value


; *****************************************************************************************
; Set-Up
; *****************************************************************************************

DEL GAT
; Coordinate System 1
&1
; Make sure all buffers are closed
CLOSE
; Assign motor 1 to the X-axis
#1->X

; *****************************************************************************************
; Program
; *****************************************************************************************

OPEN PROG 1
CLEAR

LINEAR
ABS
TM2000

; Set Initial Values

BUFFER_START_A = $XXXX
BUFFER_START_B = BUFFER_START_A + 11*BUFFER_LENGTH

CURRENT_BUFFER = BUFFER_START_A
BUFFER_LENGTH = 1000
CURRENT_INDEX = 0
STATUS = 0
TOTAL_POINTS = 0
CANCEL = 0

; <<< Allow EPICS to assign any values here, so they won't be reset

WHILE(CANCEL != 1) ; Run indefinitely, but allow EPICS to stop program

    CURRENT_INDEX = 0
    WHILE(CURRENT_INDEX < BUFFER_LENGTH)

        X_COORD = CURRENT_INDEX
        Y_COORD = $(
        Z_COORD
        U_COORD
        V_COORD
        W_COORD
        A_COORD
        B_COORD
        C_COORD
        TIME_VAL
        USER_VAL
        X(XCoord) Y(YCoord) ...

        IF USER_VAL != 0
            GOSUB(USER_VAL)
        ENDIF

        CURRENT_INDEX = CURRENT_INDEX + 1

    END WHILE

    IF CURRENT_BUFFER = BUFFER_START_A
        CURRENT_BUFFER = BUFFER_START_B
    ELSE
        CURRENT_BUFFER = BUFFER_START_A

ENDWHILE

CLOSE

; Buffers: AX, AY, AZ, AU, AV, AW, AA, AB, AC, ATime, AUser
;          BX, BY, BZ, BU, BV, BW, BA, BB, BC, BTime, BUser

; To-Do:
;   * Do we need to change the program based on which axes are being used, or can we just call
;       empty move calls on them? If so, how? We can distribute buffers like PMAC does for
        axes, so the maximum number for each is allowed.
;   * Can we specify delta times by changing TM before each move, is this resource heavy or
;       or are there any other issues with this? If not, how do we use SPLINE2 to specify
;       delta times? - X1000 TA50 is supposed to do it?