; ********************************************
; Parameters
; ********************************************

#DEFINE NUM_LOOPS P1
#DEFINE COUNTER P2
#DEFINE STEP P3
#DEFINE SMALL_STEP P4
#DEFINE OVER_STEP P5
#DEFINE ANGLE P6
#DEFINE X_STEP P7
#DEFINE X_SMALL_STEP P8
#DEFINE Y_STEP P9
#DEFINE Y_SMALL_STEP P10
#DEFINE X_OS P11
#DEFINE Y_OS P12
#Define X_Vel P13
#Define Y_Vel P14
#Define X_Move P15
#Define Y_Move P16
#Define Prev_X_Move P17
#Define Prev_Y_Move P18
#Define Next_X_Move P19
#Define Next_Y_Move P20
#Define MoveTime P21
#Define Sub_Counter P22
#Define Num_Steps P23
#Define TurnTime P24


; ********************************************
; Set-Up
; ********************************************

DEL GAT	
; Coordinate System 1
&1
; Make sure all buffers are closed
CLOSE
; Assign motor 1 to the X-axis
#1->50X
; Assign motor 2 to the Y-axis
#2->50Y

; ********************************************
; Program
; ********************************************

OPEN PROG 1
CLEAR

; Set move modes
MoveTime = 0.025
TurnTime = 0.25
PVT (MoveTime*1000)
ABS

NUM_LOOPS = 3
COUNTER = 0
STEP = 1000
SMALL_STEP = 5
OVER_STEP = 25

ANGLE = 0
X_STEP = STEP*COS(ANGLE)
X_OS = OVER_STEP*COS(ANGLE)
X_SMALL_STEP = SMALL_STEP*SIN(ANGLE)
X_Move = 0 Prev_X_Move = 0
Next_X_Move = COUNTER*X_SMALL_STEP

Y_STEP = STEP*SIN(ANGLE)
Y_OS = OVER_STEP*SIN(ANGLE)
Y_SMALL_STEP = SMALL_STEP*COS(ANGLE)
Y_Move = 0 Prev_Y_Move = 0
Next_Y_Move = COUNTER*Y_SMALL_STEP
Sub_Counter = 0
Num_Steps = 100

CMD"End Gat"	; Stop gathering
CMD"Del Gat"	; Deletes the gather buffer
CMD"Def Gat"	; Allocates all the available memory as gather buffer
Dwell 0		; Force CMD lines to execute
CMD"Gat"	; Starts gathering of the data
WHILE(COUNTER < NUM_LOOPS)
		
	While(Sub_Counter < Num_Steps)
		GoSub1
		Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
		Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
		GoSub3
		X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
		Sub_Counter = Sub_Counter + 1
	End While
	
	GoSub1
	Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
	Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
	GoSub3
	X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
	
	COUNTER = COUNTER + 1
	
	GoSub1
	Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
	Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
	GoSub2
	X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
	Sub_Counter = Sub_Counter - 1
	
	GoSub1
	Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
	Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
	GoSub4
	X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
	Sub_Counter = Sub_Counter - 1
	
	While(Sub_Counter > 0)
		GoSub1
		Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
		Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
		GoSub3
		X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
		Sub_Counter = Sub_Counter - 1
	End While
	
	GoSub1
	Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
	Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
	GoSub3
	X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
	
	COUNTER = COUNTER + 1
	
	GoSub1
	Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
	Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
	GoSub2
	X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
	Sub_Counter = Sub_Counter + 1
	
	GoSub1
	Next_X_Move = COUNTER*X_SMALL_STEP-X_STEP*(Sub_Counter/Num_Steps)
	Next_Y_Move = COUNTER*Y_SMALL_STEP+Y_STEP*(Sub_Counter/Num_Steps)
	GoSub4
	X(X_Move):(X_Vel) Y(Y_Move):(Y_Vel)
	Sub_Counter = Sub_Counter + 1
	
ENDWHILE
Dwell 0		; Force CMD lines to execute
CMD"End Gat"	; Send On-line command to stop data gathering
Dwell 0		; Force CMD lines to execute

X0 Y0

N1
	Prev_X_Move = X_Move
	Prev_Y_Move = Y_Move
	X_Move = Next_X_Move
	Y_Move = Next_Y_Move
Return

N2
	PVT (MoveTime*1000)
	X_Vel = (X_Move - Prev_X_Move)/MoveTime
	Y_Vel = (Y_Move - Prev_Y_Move)/MoveTime
Return

N3
	PVT (MoveTime*1000)
	X_Vel = (Next_X_Move-Prev_X_Move)/(2*MoveTime)
	Y_Vel = (Next_Y_Move-Prev_Y_Move)/(2*MoveTime)
Return

N4
	PVT (TurnTime*1000)
	X_Vel = (Next_X_Move - X_Move)/MoveTime
	Y_Vel = (Next_Y_Move - Y_Move)/MoveTime
Return

CLOSE