#include "./trajectory_scan.h"

; *****************************************************************************************
; Set-Up
; *****************************************************************************************

Del Gat

; Set Initial Values
BufferLength = 1000
BufferAdr_A = $30000
BufferAdr_B = BufferAdr_A + 11*BufferLength
BlankAddress = 0
Status = 0
Abort = 0

; Make sure all buffers are closed
Close

; *****************************************************************************************
; Program
; *****************************************************************************************

Open Prog 1
Clear

Status = 1
Abort = 0

Abs
FRAX(X,Y,Z,U,V,W,A,B,C)

CurrentBufferAdr = BufferAdr_A
CurrentIndex = 0
TotalPoints = 0
CurrentBufferFill = BufferFill_A
PrevBufferFill = BufferLength
CurrentBuffer = 0
M4500 = 0

GoSub1          ; Check which axes are required
GoSub6          ; Set addresses for required axes

P4201 = 0
P4202 = 0

CMD"End Gat"    ; Stop gathering
CMD"Del Gat"    ; Deletes the gather buffer
CMD"Def Gat"    ; Allocates all the available memory as gather buffer
Dwell 0         ; Force CMD lines to execute
CMD"Gat"        ; Starts gathering of the data

While(Abort != 1 and CurrentBufferFill > 0 and PrevBufferFill = BufferLength) ; Run indefinitely, but allow EPICS to stop program

    P4201 = P4201 + 1

    ; Toggle buffer addresses
    If(P4201>1)
        If(CurrentBuffer = 0)
            CurrentBufferAdr = BufferAdr_B
            CurrentBufferFill = BufferFill_B
            BufferFill_A = 0
            CurrentBuffer = 1
        Else
            CurrentBufferAdr = BufferAdr_A
            CurrentBufferFill = BufferFill_A
            BufferFill_B = 0
            CurrentBuffer = 0
        End If
    End If

    CurrentIndex = 0
    While(Abort != 1 and CurrentIndex < CurrentBufferFill)

        P4202 = P4202 + 1

        Next_Time = Next_Time_N/4           ; Convert 1/4s of a ms into ms
        GoSub2                              ; Shift values through Next_* -> *_Coord -> Prev_*

        ; Update Next_* addresses based on incremented `CurrentIndex`
        GoSub6

        PVT (Time)
        ; Calculate velocities
        GoSub8

        ; Move axes
        GoSub7

        ; Run any required subroutine
        If(User > 0)
            GoSub(User)
        End If

        CurrentIndex = CurrentIndex + 1
        TotalPoints = TotalPoints + 1

        ; Check for following error and run-time error
        If(M141 = 1 or M241 = 1 or RTE = 1)
            Abort = 1
            Status = 3
        End If

    End While

    PrevBufferFill = CurrentBufferFill      ; Update previous buffer fill level to finish scan if it wasn't full
    GoSub2                                  ; Shift previous and current coords to N-1th and Nth points in buffer

End While

; Move to final point if no error occurred
If(Status = 1)
    GoSub2                  ; Shift to final points in buffer
    PVT (Time)
    GoSub3                  ; Prev->Current velocity calculation
    GoSub7                  ; Move axes
    Status = 2              ; Set program finished (Idle status)
End If

Dwell 0         ; Force CMD lines to execute
CMD"End Gat"    ; Send On-line command to stop data gathering
Dwell 0         ; Force CMD lines to execute

CMD"A"
While(1=1)
End While

; Subroutine 1 ************************************************************************************
; Convert <Axes> to binary values for each axis to decide which axes to use
; *************************************************************************************************
N1
    If(Axes > 511 or Axes < 1)
        Status = 3
        Abort = 1
    Else
        X_Axis = 0
        Y_Axis = 0
        Z_Axis = 0
        U_Axis = 0
        V_Axis = 0
        W_Axis = 0
        A_Axis = 0
        B_Axis = 0
        C_Axis = 0

        If(Axes > 255)
            X_Axis = 1
            Axes = Axes - 256
        End If
        If(Axes > 127)
            Y_Axis = 1
            Axes = Axes - 128
        End If
        If(Axes > 63)
            Z_Axis = 1
            Axes = Axes - 64
        End If
        If(Axes > 31)
            U_Axis = 1
            Axes = Axes - 32
        End If
        If(Axes > 15)
            V_Axis = 1
            Axes = Axes - 16
        End If
        If(Axes > 7)
            W_Axis = 1
            Axes = Axes - 8
        End If
        If(Axes > 3)
            A_Axis = 1
            Axes = Axes - 4
        End If
        If(Axes > 1)
            B_Axis = 1
            Axes = Axes - 2
        End If
        If(Axes > 0)
            C_Axis = 1
            Axes = Axes - 1
        End If
    End If
Return

; Subroutine 2 ************************************************************************************
; Shift coordinate buffer through Next -> Coord -> Prev
; *************************************************************************************************

N2
    Time = Next_Time
    Prev_X = X_Coord
    X_Coord = Next_X
    Prev_Y = Y_Coord
    Y_Coord = Next_Y
    Prev_Z = Z_Coord
    Z_Coord = Next_Z
    Prev_U = U_Coord
    U_Coord = Next_U
    Prev_V = V_Coord
    V_Coord = Next_V
    Prev_W = W_Coord
    W_Coord = Next_W
    Prev_A = A_Coord
    A_Coord = Next_A
    Prev_B = B_Coord
    B_Coord = Next_B
    Prev_C = C_Coord
    C_Coord = Next_C
    User = Next_User
    VelMode = NextVelMode
Return

; Subroutines 3-5 *********************************************************************************
; Calculate velocities for next move - 3: Prev->Current, 4: Prev->Next, 5: Current->Next
; *************************************************************************************************
; Multiply velocities by 1000 because units(Time): msec and units(velocity): sec in PVT move def

N3
    If(Time = 0)
    Status = 4
    Abort = 1
    CMD"A"
    Dwell 0
    Time = 1000
    End If
    X_Vel = 1000*(X_Coord - Prev_X)/Time
    Y_Vel = 1000*(Y_Coord - Prev_Y)/Time
    Z_Vel = 1000*(Z_Coord - Prev_Z)/Time
    U_Vel = 1000*(U_Coord - Prev_U)/Time
    V_Vel = 1000*(V_Coord - Prev_V)/Time
    W_Vel = 1000*(W_Coord - Prev_W)/Time
    A_Vel = 1000*(A_Coord - Prev_A)/Time
    B_Vel = 1000*(B_Coord - Prev_B)/Time
    C_Vel = 1000*(C_Coord - Prev_C)/Time
Return

N4
    If(Time = 0)
        Status = 4
        Abort = 1
        CMD"A"
        Dwell 0
        Time = 1000
    End If
    X_Vel = 1000*(Next_X - Prev_X)/(Time + Next_Time)
    Y_Vel = 1000*(Next_Y - Prev_Y)/(Time + Next_Time)
    Z_Vel = 1000*(Next_Z - Prev_Z)/(Time + Next_Time)
    U_Vel = 1000*(Next_U - Prev_U)/(Time + Next_Time)
    V_Vel = 1000*(Next_V - Prev_V)/(Time + Next_Time)
    W_Vel = 1000*(Next_W - Prev_W)/(Time + Next_Time)
    A_Vel = 1000*(Next_A - Prev_A)/(Time + Next_Time)
    B_Vel = 1000*(Next_B - Prev_B)/(Time + Next_Time)
    C_Vel = 1000*(Next_C - Prev_C)/(Time + Next_Time)
Return

N5
    If(Time = 0)
        Status = 4
        Abort = 1
        CMD"A"
        Dwell 0
        Time = 1000
    End If
    X_Vel = 1000*(Next_X - X_Coord)/Next_Time
    Y_Vel = 1000*(Next_Y - Y_Coord)/Next_Time
    Z_Vel = 1000*(Next_Z - Z_Coord)/Next_Time
    U_Vel = 1000*(Next_U - U_Coord)/Next_Time
    V_Vel = 1000*(Next_V - V_Coord)/Next_Time
    W_Vel = 1000*(Next_W - W_Coord)/Next_Time
    A_Vel = 1000*(Next_A - A_Coord)/Next_Time
    B_Vel = 1000*(Next_B - B_Coord)/Next_Time
    C_Vel = 1000*(Next_C - C_Coord)/Next_Time
Return

; Subroutine 6 ************************************************************************************
; Increment coordinate pointers (CurrentIndex is incremented in main)
; *************************************************************************************************

N6
    VelMode_Adr = CurrentBufferAdr + CurrentIndex
    User_Adr = CurrentBufferAdr + CurrentIndex
    Time_Adr = CurrentBufferAdr + CurrentIndex
    If(X_Axis = 1)
        X_Adr = CurrentBufferAdr + CurrentIndex + BufferLength
    End If
    If(Y_Axis = 1)
        Y_Adr = CurrentBufferAdr + CurrentIndex + 2*BufferLength
    End If
    If(Z_Axis = 1)
        Z_Adr = CurrentBufferAdr + CurrentIndex + 3*BufferLength
    End If
    If(U_Axis = 1)
        U_Adr = CurrentBufferAdr + CurrentIndex + 4*BufferLength
    End If
    If(V_Axis = 1)
        V_Adr = CurrentBufferAdr + CurrentIndex + 5*BufferLength
    End If
    If(W_Axis = 1)
        W_Adr = CurrentBufferAdr + CurrentIndex + 6*BufferLength
    End If
    If(A_Axis = 1)
        A_Adr = CurrentBufferAdr + CurrentIndex + 7*BufferLength
    End If
    If(B_Axis = 1)
        B_Adr = CurrentBufferAdr + CurrentIndex + 8*BufferLength
    End If
    If(C_Axis = 1)
        C_Adr = CurrentBufferAdr + CurrentIndex + 9*BufferLength
    End If
Return

; Subroutine 7 ************************************************************************************
; Move axes
; *************************************************************************************************

N7
    ; Set to Q Variables before move call to shorten command
    Q1 = X_Coord
    Q2 = X_Vel
    Q3 = Y_Coord
    Q4 = Y_Vel
    Q5 = Z_Coord
    Q6 = Z_Vel
    Q7 = U_Coord
    Q8 = U_Vel
    Q9 = V_Coord
    Q10 = V_Vel
    Q11 = W_Coord
    Q12 = W_Vel
    Q13 = A_Coord
    Q14 = A_Vel
    Q15 = B_Coord
    Q16 = B_Vel
    Q17 = C_Coord
    Q18 = C_Vel

    X(Q1):(Q2) Y(Q3):(Q4) Z(Q5):(Q6) U(Q7):(Q8) V(Q9):(Q10) W(Q11):(Q12) A(Q13):(Q14) B(Q15):(Q16) ;C(Q17):(Q18)
Return

N8
    If(VelMode = 1)
        GoSub3                          ; Prev -> Current
        P4500 = P4500 + 1
    EndIf
    If(VelMode = 0 or VelMode > 2)
        GoSub4                          ; Prev -> Next
    EndIf
    If(VelMode = 2)
    GoSub5                              ; Current -> Next
    EndIf
Return

N10
    M4500 = 1
Return

Close

